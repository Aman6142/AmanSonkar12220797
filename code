#include <iostream>
#include <fstream>
#include <map>
#include <vector>
#include <cmath>
#include <string>
#include <algorithm>
#include "json.hpp"

using namespace std;
using json = nlohmann::json;

using BigInt = __int128;

void printBigInt(BigInt n) {
    if (n == 0) {
        cout << "0";
        return;
    }
    string result;
    while (n > 0) {
        result += (n % 10) + '0';
        n /= 10;
    }
    reverse(result.begin(), result.end());
    cout << result;
}

BigInt decodeBase(const string &value, int base) {
    BigInt result = 0;
    for (char c : value) {
        int digit = isdigit(c) ? (c - '0') : (tolower(c) - 'a' + 10);
        result = result * base + digit;
    }
    return result;
}

BigInt lagrangeInterpolation(const vector<int> &x, const vector<BigInt> &y, int k) {
    BigInt result = 0;
    for (int i = 0; i < k; ++i) {
        BigInt term = y[i];
        for (int j = 0; j < k; ++j) {
            if (i != j) {
                term *= -x[j];
                term /= (x[i] - x[j]);
            }
        }
        result += term;
    }
    return result;
}

BigInt processFile(const string &filename) {
    ifstream file(filename);
    json j;
    file >> j;

    int n = j["keys"]["n"];
    int k = j["keys"]["k"];

    vector<int> x_values;
    vector<BigInt> y_values;

    for (auto &el : j.items()) {
        if (el.key() == "keys") continue;

        int x = stoi(el.key());
        int base = stoi(el.value()["base"].get<string>());
        string val = el.value()["value"].get<string>();

        BigInt y = decodeBase(val, base);
        x_values.push_back(x);
        y_values.push_back(y);
    }

    return lagrangeInterpolation(x_values, y_values, k);
}

int main() {
    BigInt secret1 = processFile("test1.json");
    BigInt secret2 = processFile("test2.json");

    cout << "Secret for Test Case 1: ";
    printBigInt(secret1);
    cout << endl;

    cout << "Secret for Test Case 2: ";
    printBigInt(secret2);
    cout << endl;

    return 0;
}
